I'll guide you through the process of testing your API endpoints using Postman. Postman is a popular tool for API development and testing. Here's how you can use it to check the API we've just created:

1. First, make sure you have Postman installed. If not, you can download it from [https://www.postman.com/downloads/](https://www.postman.com/downloads/)
2. Launch Postman and create a new request for each API endpoint.
3. Ensure your backend server is running (`npm run dev` in the backend directory).


Now, let's test each endpoint:

### 1. Create a Product

- Method: POST
- URL: `http://localhost:5000/api/products`
- Headers:

- Key: `Content-Type`
- Value: `application/json`



- Body: Raw (JSON)


```json
{
  "name": "Test Product",
  "description": "This is a test product",
  "price": 19.99
}
```

Click "Send" and you should receive a response with the created product, including an automatically generated `_id`.

### 2. Get All Products

- Method: GET
- URL: `http://localhost:5000/api/products`


No body is needed for this request. Click "Send" and you should see a list of all products.

### 3. Update a Product

- Method: PUT
- URL: `http://localhost:5000/api/products/:id` (replace `:id` with an actual product ID)
- Headers:

- Key: `Content-Type`
- Value: `application/json`



- Body: Raw (JSON)


```json
{
  "name": "Updated Product Name",
  "price": 24.99
}
```

Click "Send" and you should receive the updated product data.

### 4. Delete a Product

- Method: DELETE
- URL: `http://localhost:5000/api/products/:id` (replace `:id` with an actual product ID)


No body is needed for this request. Click "Send" and you should receive a success message.

### 5. Create an Order

- Method: POST
- URL: `http://localhost:5000/api/orders`
- Headers:

- Key: `Content-Type`
- Value: `application/json`



- Body: Raw (JSON)


```json
{
  "products": ["product_id_1", "product_id_2"],
  "totalAmount": 39.98
}
```

Replace `"product_id_1"` and `"product_id_2"` with actual product IDs from your database.

Click "Send" and you should receive the created order data.

### 6. Get All Orders

- Method: GET
- URL: `http://localhost:5000/api/orders`


No body is needed for this request. Click "Send" and you should see a list of all orders.

### 7. Update an Order

- Method: PUT
- URL: `http://localhost:5000/api/orders/:id` (replace `:id` with an actual order ID)
- Headers:

- Key: `Content-Type`
- Value: `application/json`



- Body: Raw (JSON)


```json
{
  "status": "processing"
}
```

Click "Send" and you should receive the updated order data.

### 8. Archive an Order

- Method: PUT
- URL: `http://localhost:5000/api/orders/:id/archive` (replace `:id` with an actual order ID)


No body is needed for this request. Click "Send" and you should receive the updated order with status set to "archived".
